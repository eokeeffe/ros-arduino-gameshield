"""autogenerated by genpy from wii_nunchuck/nunchuck.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class nunchuck(genpy.Message):
  _md5sum = "ecf0e6fe033d1fb642fae3cb7ae41c86"
  _type = "wii_nunchuck/nunchuck"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 joy_x
uint8 joy_y
uint8 acc_x
uint8 acc_y
uint8 acc_z
bool button_c
bool button_z

"""
  __slots__ = ['joy_x','joy_y','acc_x','acc_y','acc_z','button_c','button_z']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joy_x,joy_y,acc_x,acc_y,acc_z,button_c,button_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(nunchuck, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joy_x is None:
        self.joy_x = 0
      if self.joy_y is None:
        self.joy_y = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.acc_z is None:
        self.acc_z = 0
      if self.button_c is None:
        self.button_c = False
      if self.button_z is None:
        self.button_z = False
    else:
      self.joy_x = 0
      self.joy_y = 0
      self.acc_x = 0
      self.acc_y = 0
      self.acc_z = 0
      self.button_c = False
      self.button_z = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7B.pack(_x.joy_x, _x.joy_y, _x.acc_x, _x.acc_y, _x.acc_z, _x.button_c, _x.button_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.joy_x, _x.joy_y, _x.acc_x, _x.acc_y, _x.acc_z, _x.button_c, _x.button_z,) = _struct_7B.unpack(str[start:end])
      self.button_c = bool(self.button_c)
      self.button_z = bool(self.button_z)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7B.pack(_x.joy_x, _x.joy_y, _x.acc_x, _x.acc_y, _x.acc_z, _x.button_c, _x.button_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.joy_x, _x.joy_y, _x.acc_x, _x.acc_y, _x.acc_z, _x.button_c, _x.button_z,) = _struct_7B.unpack(str[start:end])
      self.button_c = bool(self.button_c)
      self.button_z = bool(self.button_z)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7B = struct.Struct("<7B")
